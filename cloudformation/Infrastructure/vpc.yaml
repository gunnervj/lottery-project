AWSTemplateFormatVersion: '2010-09-09'
Description: Creates VPC and Subnets for ECS
Parameters:
  Application:
    Description: Application Name for which VPC is being created
    Type: String
    Default: lottery-project

  Environment:
    Description: Which environment the VPC is created for.
    Type: String
    Default: dev
    ConstraintDescription: Environment can be [dev, qa, prod]
    AllowedValues:
      - dev
      - qa
      - prod

  Region:
    Description: "Region where VPC needs to be created"
    Type: String
    Default: ap-south-1
    AllowedValues:
      - ap-south-1
      - us-east-1

Mappings:
  SubnetConfiguration:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.1.0/24
    Public2:
      CIDR: 10.0.2.0/24
  AZRegions:
    ap-south-1:
      AZs: [ "a", "b" ]
    us-east-1:
      AZs: [ "a", "b" ]


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ SubnetConfiguration, VPC, CIDR ]
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join
        - ""
        - - !Ref Region
          - !Select [ 0, !FindInMap [ AZRegions, !Ref Region, AZs ] ]
      CidrBlock: !FindInMap [ SubnetConfiguration, Public1, CIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join
        - ""
        - - !Ref Region
          - !Select [ 1, !FindInMap [ AZRegions, !Ref Region, AZs ] ]
      CidrBlock: !FindInMap [ SubnetConfiguration, Public2, CIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  MyInternetGatewayVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyInternetGatewayVPCAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${Environment}:${Application}:VPC

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2

  PublicSubnets:
    Description: List of public subnets
    Value: !Join
      - ","
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Export:
      Name: !Sub ${Environment}:${Application}:subnets
